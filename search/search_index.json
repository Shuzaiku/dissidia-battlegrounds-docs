{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#about","title":"About","text":"<p>This site documents the structure and tools of the Roblox video game Dissidia Battlegrounds. The source code for this game is solely hosted in Roblox Studio.</p>"},{"location":"#basic-project-layout","title":"Basic project layout","text":"<pre><code>ReplicatedStorage/\n    AdminEvents             # A folder storing RemoteEvents used to execute admin commands.\n    CoreEvents              # A folder containing events and functions used for core gameplay.\n    GuiEvents               # A folder containing events only relevant to GUI.\n    HitboxRemotes           # A folder that stores RemoteEvents created by HitboxClass.*\n    Modules                 # A folder to store all modules used by both server and client, if the module is a single function, store it in Utility instead.\n    Moon2CameraFiles        # A folder storing MoonAnimation2 camera files.\n    Roles                   # A folder storing all information relevant to movesets.\n    Settings                # A folder storing events and functions used for a user's settings.\n    SkillBindableFunctions  # A folder storing BindableFunctions for player input.*\n    SkillRemoteFunctions    # A folder containing RemoteFunctions for each individual skill.\n    Utility                 # A folder storing all utility modules, commonly used functions.\n    VFX                     # A folder storing all the VFX used in the game.\nServerScriptService/\n    SkillScripts            # A folder where all server-side skill code is stored.\n    ServerUtils             # A module with commonly used methods by the server.\nStarterGui/\n    Freecam                 # The ScreenGui containing Roblox's default freecam script, made available to all players.*\n    PersistentGui           # A ScreenGui that does not reset on spawn.\n    PersistentGuiNoInset    # A ScreenGui that does not reset on spawn and ignores GUI inset.\n    ScreenGui               # A default ScreenGui.\n    ScreenGuiNoInset        # A default ScreenGui that ignores GUI inset.\n</code></pre> <p>*  -   Do not change change this Instance.</p>"},{"location":"#place-links","title":"Place links","text":"<ul> <li>Main</li> <li>Ranked Lobby</li> <li>The Struggle</li> <li>Testing</li> </ul>"},{"location":"nav/collection-service/","title":"Tags","text":""},{"location":"nav/collection-service/#introduction","title":"Introduction","text":"<p>Dissidia Battlegrounds uses Tags to manage collections of Instances that share common behaviour. This page documents the most commonly used Tags.</p>"},{"location":"nav/collection-service/#inviswalls","title":"InvisWalls","text":"<p>BaseParts with this tag will act as invisible boundaries that react to the player's movements to emit a ParticleEmitter.</p> <p></p> Note <p>InvisWalls BaseParts are expected to have the following Collision Properties:</p> <p></p>"},{"location":"nav/collection-service/#cameraoccluder","title":"CameraOccluder","text":"<p>CameraOccluders are BaseParts that the camera cannot phase through. This is ideal for situations where you want to override Roblox's default camera occlusion.</p> <p>By default, Roblox will occlude BaseParts that are:</p> <ol> <li>Opaque (Transparency &lt; 0.25)</li> <li>Interactable (CanCollide = true)</li> <li>Not in the same assembly as the subject (body parts of the character controlling the camera)</li> </ol> Example <p>The following is a scenario of a Model with 2 layers: a MeshPart that cannot collide and a Part beneath that is invisible but can collide.</p> <p></p> <p>By default, this will not occlude, and the camera will clip through the ground.</p> <p></p> <p>But with the CameraOccluder Tag on the invisible Part, it will occlude.</p> <p></p>"},{"location":"nav/create-moveset/","title":"Creating Movesets","text":""},{"location":"nav/create-moveset/#introduction","title":"Introduction","text":"<p>Creating movesets is possibly the most repetitive and labour-intensive task for any Battlegrounds game; thankfully, Dissidia Battlegrounds has automated assets to make this a smooth process. This page will cover how you can work with these tools to get started with creating movesets.</p> <p>Note</p> <p>To follow this guide you must be working in the Testing place, not the main place.</p>"},{"location":"nav/create-moveset/#create-a-role-folder","title":"Create a Role Folder","text":"<p>In-game, movesets are distinguished as Roles, and they all have a unique folder that stores their information in <code>ReplicatedStorage/Roles</code>.</p> <p></p> <p>It is ideal to make a copy of <code>ServerStorage/DevAssets/Templates/RoleTemplate</code> for this task, since certain instances require a Path attribute that is already included within the template. The name that you decide to give to this folder is important to determine how the rest of the codebase will refer to the Role.</p> <p></p>"},{"location":"nav/create-moveset/#creating-a-weapon","title":"Creating a Weapon","text":""},{"location":"nav/create-moveset/#from-template","title":"From template","text":"<p>Once you've created a Role, you may notice that the template contains many Instances within it, we will focus on Weapons for now, this folder stores each Role's weapons. </p> <p></p> <p>Weapons are an important type of Model, and every character must have at least one weapon(1). To create a Weapon model, simply make a copy of the WeaponTemplate within <code>ServerStorage/DevAssets/Templates/WeaponTemplate</code>.</p> <ol> <li>Weapons are responsible for:<ul> <li>Dash / Hit / Swing sounds.</li> <li>Hit effects.</li> </ul> </li> </ol> <p></p> <p>You may move it into workspace and change any of its visual properties(1), however, <code>Grip</code>, <code>Sounds</code>, <code>HitEffects</code> and <code>CritEffects</code> should remain untouched for now.</p> <ol> <li>Such as Name, Trail and MeshPart.</li> </ol> <p></p>"},{"location":"nav/create-moveset/#setting-up-grip","title":"Setting up Grip","text":"<p>Note</p> <p>This step will assume that you have the Moon Animator 2 plugin.</p> <p>Grip is a Motor6D, it is what we use to animate the weapon. The easiest way to set its <code>C0</code> property is to create a copy of your existing weapon and positioning it relative to a dummy where you want it to go, then you may delete the <code>Grip</code> instance from this clone.</p> <p></p> <p>Now toggle Moon Animator's Easy Weld.</p> <p></p> <p>And set the Base Part to whatever bodypart you want the weapon to follow, then Target Part to <code>Handle</code>. Once you're done click Join in Place.</p> <p></p> <p>Moon Animator should have created a Motor6D named Handle, parented to Base Part (in this case, it's the Right Arm): You can now simply copy its <code>C0</code> property onto the original weapon's Grip. Additionally, you can start creating animations with the weapon you just welded.</p> <p></p> <p></p> <p>To finish up, set the original weapon's <code>Grip</code> Part0 attribute to the same name as the Base Part.</p> <p></p> <p>Now you may move the weapon into <code>&lt;RoleFolder&gt;/Weapons</code>.</p> <p></p>"},{"location":"nav/create-moveset/#assigning-sounds","title":"Assigning sounds","text":"<p>Head onto <code>&lt;Weapon&gt;.Handle.Sounds</code> and create Sounds for each attachment, you may preferably create more than one sound for all of these (except maybe Tackle). The name you give to the sounds does not really matter except for Hit, in which case the sound's name must be \"Hit\" .. <code>index</code>, where <code>index</code> refers to an integer(1).</p> <ol> <li>     This is how <code>Hit</code> is expected to be organized (there are 3 normal hits in every combo string).</li> </ol> <p></p> <p>The following is a list of when and how all of these sounds will play:</p> Sound Attachment Description <code>FinisherHit</code> The last hit of a combo string, plays any random sound within it <code>FinisherSwing</code> The swoosh sound of FinisherHit, plays random as well <code>Hit</code> Any normal hit within a combo string, plays sounds in order by their <code>index</code> suffix <code>Swing</code> The swoosh sound for Hit, plays random <code>Tackle</code> The sound(s) to play when the character lands a successful dash attack, every sound within this attachment will play at the same time"},{"location":"nav/create-moveset/#assigning-hit-effects","title":"Assigning hit effects","text":"<p>There are two types of hit effects for each weapon, a normal hit effect and a critical hit effect. These effects must be created with ParticleEmitters, and they must be designed relative to an <code>Attachment</code>. Once you're done, you may place them under <code>&lt;Weapon&gt;/HitEffects</code> or <code>&lt;Weapon&gt;/CritEffects</code> respectively.</p> <p></p>"},{"location":"nav/create-moveset/#creating-base-animations","title":"Creating base animations","text":"<p>All the basic animations required for the role are located within <code>&lt;RoleFolder&gt;/Animations</code>, the automation system will take care of assigning them their proper places, so all you have to do is assign the animation id to these.</p> <p></p> Info <p>Combo 1 - 3 and Tackle last 30 frames</p> <ul> <li>0-10 frames windup</li> <li>10-15 frames attack</li> <li>15-30 frames punish</li> </ul> <p>Combo 4 and downslam last 35 frames</p> <ul> <li>0-10 frames windup</li> <li>10-15 frames attack</li> <li>15-35 frames punish</li> </ul> <p>Uppercut lasts 35 frames</p> <ul> <li>0-15 frames windup</li> <li>15-20 frames attack</li> <li>20-35 frames punish</li> </ul>"},{"location":"nav/create-moveset/#default-animation-overrides-optional","title":"Default animation overrides (optional)","text":"<p>Each role has the option to override any of the default animations within <code>&lt;Player&gt;/Character/Animate</code>.</p> <p></p> <p>To override them, go to <code>&lt;RoleFolder&gt;/Animations</code> and create a StringValue with the same name and the following attributes:</p> Attribute Type Value Path string { character }.Animate Replace boolean true <p>The StringValue must have an Animation parented to it, additionally, you can set a custom speed animation value by assigning the following attribute:</p> Attribute Type Speed number <p>On top of this, the same steps can be followed (except for assigning a <code>Replace</code> attribute) to create a custom run animation when a weapon is equipped, by naming the StringValue <code>weaponrun</code>.</p> Example <p></p>"},{"location":"nav/create-moveset/#creating-accessories-optional","title":"Creating accessories (optional)","text":"Tip <p>The following code will spawn an accessory model, you may paste it into the Roblox Studio command bar: <pre><code>local cHS = game:GetService(\"ChangeHistoryService\")\nlocal iS = game:GetService(\"InsertService\")\nlocal sS = game:GetService(\"Selection\")\n\ncHS:SetWaypoint(\"CatalogItemLoaded\")\nlocal id = 111111 -- your accessory id here\nlocal item: Model = iS:LoadAsset(id)\nitem.Parent = game.Workspace \nsS:Set({item})\n\nlocal camera = workspace.Camera\ncamera.CFrame = CFrame.new(item.WorldPivot.Position) * camera.CFrame.Rotation * CFrame.new(0, 0, 15)\n</code></pre></p> <p>Now just drag the accessory out of the model and place it inside <code>&lt;RoleFolder&gt;/Accessories</code>.</p> <p></p> <p>Finally, you'll have to set the accessory's Path attribute to <code>{ character }</code>. This will allow the PathInterpreter module to parent the accessory to the character when they spawn.</p> <p></p>"},{"location":"nav/create-moveset/#guard-effects","title":"Guard effects","text":"<p>There are two types of guard effects for guarding: default and parry. Both of these shall have unique sound and visual effects.</p> <p>You may place each corresponding sound on their respective <code>Attachment</code>.</p> <p></p> <p>You may place each corresponding ParticleEmitter on their respective <code>Attachment</code>.</p> <p></p>"},{"location":"nav/create-moveset/#weapons-for-specific-actions","title":"Weapons for specific actions","text":"<p>Sometimes, you may want to use different weapons for specific actions, for example, if a character has two swords. To facilitate this process, you can use <code>weaponBinds</code>(1). You can find this table within the <code>&lt;RoleFolder&gt;/CharacterModule</code> ModuleScript.</p> <ol> <li><code>weaponBinds</code> is a dictionary storing an array of strings representing Weapon names that may be summoned for each corresponding     action. You may summon more than a single weapon for each action.</li> </ol> <pre><code>local weaponBinds = {\n    -- NOTICE: Default is the only non optional field, every other field will return Default\n    -- if it is not defined (see metatable below)\n    Default = {\"WeaponName\"},\n    Guard = {\"WeaponName\"},\n    Awaken = {\"WeaponName\"},\n    Attack1 = {\"WeaponName\"},\n    Attack2 = {\"WeaponName\"},\n    Attack3 = {\"WeaponName\"},\n    Attack4 = {\"WeaponName\"},\n    Uppercut = {\"WeaponName\"},\n    Downslam = {\"WeaponName\"},\n    Run = {\"WeaponName\"}\n}\n\nlocal bindsMetatable = {\n    -- Force any undeclared actions to Default\n    __index = function(t: table)\n        return t.Default\n    end,\n}\n\nCharacterModule.WeaponBinds = setmetatable(weaponBinds, bindsMetatable)\n</code></pre>"},{"location":"nav/create-moveset/#creating-skills","title":"Creating skills","text":""},{"location":"nav/create-moveset/#local-scripts","title":"Local Scripts","text":"<p>Every local script used for skill input is stored within <code>Roles/&lt;RoleFolder&gt;/Skillset</code>. All LocalScripts under this folder must be disabled.</p> <p></p> <p>To make the creation of these scripts easier, there's a template located in <code>ServerStorage/DevAssets/ClientSkillTemplate</code>, containing the necessary tags, attributes and code for the skill to function.</p> <p></p> <p>The following table documents the behaviour of the script's attribute:</p> Attribute Type Description <code>Awakening</code> boolean Whether or not the skill is exclusive to awakening <code>Cooldown</code> number The cooldown of the skill in seconds <code>Description</code> string? (Optional) A short string representing a unique characteristic of the skill <code>Keybind</code> number An integer ranging from 1-4 indicating which number key will activate the skill <code>LastActionTime</code> number A number representing the last time when the skill was activated. Do not touch this attribute <code>SkillExemption</code> boolean If set to true, will allow the local script to receive input no matter what the <code>Awakened</code> attribute says <code>Skillset</code> string A string representing the Role's name <p>Info</p> <p>Whatever name is given to the LocalScript will be used for the skill's title in GUI. PascalCase must be used for the code to know where to put spaces.</p>"},{"location":"nav/create-moveset/#server-scripts","title":"Server Scripts","text":"<p>All server scripts for skills are located within <code>ServerScriptService/SkillScripts</code>. You may create a new folder here, and give it the same name as the Role folder, then, you can make a copy of <code>ServerStorage/DevAssets/Templates/ServerSkillTemplate</code> and parent it to the folder. The server Script must have the same name as the skill's LocalScript.</p> <p></p> <p>Before you start editing this script, you must also create a RemoteFunction that calls it. The name must be the same as the script's name plus a \"Function\" suffix, so if the script is called <code>BladeBeam</code>, the RemoteFunction's name will be <code>BladeBeamFunction</code>.</p> <p></p>"},{"location":"nav/create-moveset/#client-sided-vfx","title":"Client-sided VFX","text":"<p>If you read the first few lines of the server Script, you will notice this: <pre><code>local skillVisualEvent = ReplicatedStorage.SkillVisualEvent\n</code></pre> This event is responsible for requesting client-sided VFX to play, the event receiver in question is located in <code>StarterPlayer/StarterPlayerScripts/PlayerSetup</code>, and this is what it expects to receive: <pre><code>-- #  Create skill visual effects on server request\nskillVisualEvent.OnClientEvent:Connect(function(roleName: string, skillIndex: number, paramTable: table)\n    local character = player.Character\n    local status = character.Status\n\n    local fxModule = modules[roleName]\n    fxModule[\"skill\" .. skillIndex](table.unpack(paramTable))\nend)\n</code></pre> As you can see, it calls a function from a ModuleScript located within <code>StarterPlayerScripts/PlayerSetup/ModulesVFX</code>, this is where you may create a VFX ModuleScript, the expected structure of it is as follows: <pre><code>local Effects = {}\n\nEffects.skill0 = function()\n    -- 0th skill is reserved for summoning weapons\nend\n\nEffects.skill1 = function()\n\nend\n\nEffects.skill2 = function()\n\nend\n\nEffects.skill3 = function()\n\nend\n\nEffects.skill4 = function()\n\nend\n\nreturn Effects\n</code></pre></p> Tip <p>For better organisation, it is recommended to have each individual skill function as its own ModuleScript: <pre><code>-- # Skill imports\nlocal Sheathe = require(script:WaitForChild(\"Sheathe\"))\nlocal FinishingTouch = require(script:WaitForChild(\"FinishingTouch\"))\nlocal SonicBlade = require(script:WaitForChild(\"SonicBlade\"))\nlocal Meteorain = require(script:WaitForChild(\"Meteorain\"))\nlocal Omnislash = require(script:WaitForChild(\"Omnislash\"))\n\n-- # Module declaration\nlocal Effects = {}\n\nEffects.skill0 = Sheathe\n\nEffects.skill1 = FinishingTouch\n\nEffects.skill2 = SonicBlade\n\nEffects.skill3 = Meteorain\n\nEffects.skill4 = Omnislash\n\nreturn Effects\n</code></pre></p> <p>Each Role is expected to have 2 VFX module scripts: one for its basic skillset and one for its awakening skillset. Both modules must have the same name as the Role folder, with the awakening module having an \"Awaken\" suffix.</p> <p></p>"},{"location":"nav/create-moveset/#weapon-summoning","title":"Weapon summoning","text":"<p>Let's look back at the code in the VFX module, notice this method: <pre><code>Effects.skill0 = function()\n    -- 0th skill is reserved for summoning weapons\nend\n</code></pre> This is the function to be called whenever a character equips a weapon, it allows you to handle client-sided VFX for it however you'd like. This method is triggered by <code>&lt;RoleFolder&gt;/CharacterModule</code>, more specifically, it is the functions within the <code>summonFunctions</code> table that take care of this: <pre><code>summonFunctions.ExampleWeaponName = function(character: Model, weapon: Model, isHidden: boolean)\n    -- TODO: Server-side summoning\n\n    -- Fire 0th skill function to all clients\n    skillVisualEvent:FireAllClients(roleName, 0, {character, weapon, isHidden})\nend\n</code></pre> However, this name won't do. Summon functions are index based on the Weapon Model's name, for example, Cloud's Weapon is named \"BusterSword\", so his summon function would look like <code>summonFunctions.BusterSword</code>.</p> <p>If you don't have any given weapon to have a summon effect when they are equipped, you can simply not include it in the table, as it has a metamethod to catch nil-index errors: <pre><code>local summonMetatable = {\n    -- Returns an empty function to catch errors when there's a nil index\n    __index = function()\n        return function() end\n    end\n}\n</code></pre></p>"},{"location":"nav/create-moveset/#awakening-effects","title":"Awakening effects","text":"<p>When a character triggeres an awakening, you usually expect some sort of flashy visual and sound effects to play.</p>"},{"location":"nav/create-moveset/#server-side-effects","title":"Server-side effects","text":"<p>The server-side awakening scripts can be found in <code>ServerScriptService/AwakenServer/Modules</code>, make a new one and rename it to the Role's name.</p> <p></p> <p><code>AwakenServer</code> will call the module's <code>Awaken</code> function: <pre><code>-- # Services\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- # Variables\nlocal awakenVFXEvent = ReplicatedStorage.AwakenVFXEvent\n\n-- # Module definition\nlocal Cloud = {}\n\nCloud.Awaken = function(player: Player, character: Model)\n    -- This function is called on server when the player awakens\n\n    local extraParams = {character, \"param2\", \"param3\"}\n    awakenVFXEvent:FireAllClients(\"Cloud\", extraParams)\nend\n\nreturn Cloud\n</code></pre></p> Tip <p>Every awakening should have its own theme song, when you add a sound for this it's helpful to use <code>ServerScriptService/AwakenServer/AwakenUtils.playAwakeningMusic()</code>, as it will handle all expected behaviour of the sound for you.</p>"},{"location":"nav/create-moveset/#client-side-effects","title":"Client-side effects","text":"<p>The client-sided VFX for awakening are located within <code>StarterPlayer/StarterCharacterScripts/AwakenClient/Modules</code>. Create a new module script here and name it after the Role.</p> <p></p> <p>This ModuleScript is expected to have the following variables: <pre><code>local Cloud = {}\n\nCloud.AnimationId = 0 -- Animation id that will play when the player awakens\n\nCloud.LocalVFX = function()\n    -- This function will only display VFX to the player that triggered awakening\nend\n\nCloud.GlobalVFX = function(casterCharacter: Model, ...)\n    -- This function will display VFX for every player in game\nend\n\nreturn Cloud\n</code></pre></p>"},{"location":"nav/create-moveset/#graphic-user-interface","title":"Graphic User Interface","text":"<p>Every role has a unique awakening name and color gradient that displays on their hotbar, you can configure this in <code>Roles/&lt;RoleFolder&gt;/CharacterModule.AwakenInfo</code>: <pre><code>CharacterModule.AwakenInfo = {\n    Name = \"AWAKENING TITLE\",\n    BarColorSequence = ColorSequence.new{\n        ColorSequenceKeypoint.new(0, Color3.new(0.628473, 0.967178, 0.464561)),\n        ColorSequenceKeypoint.new(1, Color3.new(0.381827, 0.816831, 0.0540017))\n    }\n}\n</code></pre> </p>"},{"location":"nav/create-moveset/#character-selection","title":"Character selection","text":"<p>The character selection GUI is handled by Forever HD's TopbarPlus, however, to create an icon you must declare a table in either <code>ReplicatedStorage/Modules/CharacterSelection.roles</code> or <code>ReplicatedStorage/Modules/CharacterSelection.specialRoles</code>: <pre><code>CharacterSelection.roles = {\n    -- Add new Roles here available to all players\n    {\n        RoleName = \"Sora\",\n        Image = 17279130810, -- Icon image for character selection in main game\n        ThumbnailImage = 17283413458, -- Thumbnail image for character selection in \"The Struggle\" game mode\n        Label = \"Sore Sky\" -- Icon's label\n    }\n}\n\nCharacterSelection.specialRoles = {\n    -- Special roles that may not always show up as they are not available to all players.\n    -- All special roles must have a condition function to evaluate whether or not they will\n    --  show up for a given player.\n    RoleName = \"Okarun\",\n    Image = 95150705139900,\n    ThumbnailImage = 95150705139900,\n    Label = \"Okarun\",\n    Condition = function(): boolean\n        local player = Players.LocalPlayer\n        local rank = player:GetRankInGroup(GROUP_ID)\n        local id = player.UserId\n\n        return rank &gt;= DEV_RANK or table.find(OKARUN_WHITELIST, id)\n    end,\n}\n</code></pre></p> <p></p>"},{"location":"nav/create-moveset/#unique-attributes","title":"Unique Attributes","text":"<p>The following is a list of attributes that may be added to the role folder:</p> Attribute Type Description <code>DevOnly</code> boolean If true, this Role will only be accessible to developers of the game, with the exception of users listed under <code>&lt;RoleFolder&gt;/USER_WHITELIST</code> <code>EarlyAccess</code> boolean If true, this Role will only be accessible to players that own the Early Access pass or gift"},{"location":"nav/data-stores/","title":"About","text":"<p>WIP</p> <p>This page is a work in progress.</p>"},{"location":"nav/data-stores/#omen-est-steterat","title":"Omen est steterat","text":""},{"location":"nav/data-stores/#et-fuit-est","title":"Et fuit est","text":"<p>Lorem markdownum inicere Phorcidas montibus devenit. Via nec: illo agit; dedit ab fuit, locat Molpeus nebulasque moratum operis, orbe Minyeides antiquas.</p>"},{"location":"nav/data-stores/#gradieris-gravidi-magnos-est-simul-causam-inmensae","title":"Gradieris gravidi magnos est simul causam inmensae","text":"<p>Thalami prope, spissi, aliis. Quam Troia; culpa glacialis, pavens pudore ultimus fervet praelata videt.</p>"},{"location":"nav/data-stores/#cantibus-sic-ipse-viribus-nocens-semesarumque-hiatu","title":"Cantibus sic ipse viribus nocens semesarumque hiatu","text":"<p>Poterisne miserere ultus vestibus diversa; Cretaei in, sic horrent roboris sopor tenet, et. Byblis retegente flammas prece aut a flumine rediit Thracius est idque ac duxisses videoque vicem, famae! Loqui metuaris supremis, alta rerum telas ferebat, per, per et agit ingentibus quod spectem in manus vos. Tibi accipe cernit fovesque dedit Haemonias parentis, et quid. Sic rebus quique tenet, fugis, et plura non tigridis animusque fratris sederunt mitra; suis.</p> <pre><code>if (driveBatch + rup_ata_cache + app) {\n    user_virus.signature(motion(paperDigitize), gigahertzAnimatedSector);\n}\nif (dpiWinsockWimax(microphone_metadata_metal(28957, transfer,\n        cloneCpuHard)) + 5) {\n    http_typeface_laser(media(916595));\n}\nif (rjGraphicTime + nameConstantMarket == pda) {\n    vdsl -= correction_digitize_buffer(frozen, scrollControlHibernate,\n            mouseService);\n    servicesIpx += hdtv_gps_tutorial;\n    fileHyperlinkWindows.hostMatrixHandle(outputWired / remoteDotHorse, ata(\n            35, bit_leaf_barebones));\n} else {\n    thunderbolt = primary_mail.podcast(2, ripping_mebibyte);\n}\n</code></pre>"},{"location":"nav/data-stores/#et-tibi-sequor-propulit-vana-nec-hastilia","title":"Et tibi sequor propulit vana nec hastilia","text":"<p>Mellis solent non amorem Marte quae e est minata plus custos: iacentes, gaudebat canebat precor saliente quodsi. Aede lumina atra, lege erigitur patresque humus obnoxia et Herse. Tantum procerum in sagittis tenens fugias sit Cerastae litorei, postquam est tinxerat et hostem animoque. Et altera remorum monte pro, inde quam?</p>"},{"location":"nav/data-stores/#illa-inter-tenentes-tetigere-autumni","title":"Illa inter tenentes tetigere autumni","text":"<p>Reor Sparserat auctor esse non quoque flebile. Quid animo lacerta labore, scopulosque putaret. Corvo ire pressit montes.</p> <p>Et et iussis, diu ut nereides in avitum ibi medio ignemque. Illius exclamat inattenuata quodcumque et meas turbineo positas captare supremaque niveae, corque multum, nisi asello caesumque ulvam. Portus confundant praeposito suam sed fama nomina hostem, quid truces corporibus spatiosi? Belli quae Titan cruentatis silva stipata, precando modo casu. Et placidis?</p> <p>Quorum scrobibus illi, correctis mansit! Oppressos Acmona sic quondam, convexi habuisse omnis. Qui Iphis Oceano, esse distantes viri humilesque supplex femina vela, facit hunc adhuc. Ulterius penetrabit pollice solitas in in feruntur!</p>"},{"location":"nav/data-stores/gdpr/","title":"GDPR Compliance","text":"<p>WIP</p> <p>This page is a work in progress.</p>"},{"location":"nav/data-stores/gdpr/#omen-est-steterat","title":"Omen est steterat","text":""},{"location":"nav/data-stores/gdpr/#et-fuit-est","title":"Et fuit est","text":"<p>Lorem markdownum inicere Phorcidas montibus devenit. Via nec: illo agit; dedit ab fuit, locat Molpeus nebulasque moratum operis, orbe Minyeides antiquas.</p>"},{"location":"nav/data-stores/gdpr/#gradieris-gravidi-magnos-est-simul-causam-inmensae","title":"Gradieris gravidi magnos est simul causam inmensae","text":"<p>Thalami prope, spissi, aliis. Quam Troia; culpa glacialis, pavens pudore ultimus fervet praelata videt.</p>"},{"location":"nav/data-stores/gdpr/#cantibus-sic-ipse-viribus-nocens-semesarumque-hiatu","title":"Cantibus sic ipse viribus nocens semesarumque hiatu","text":"<p>Poterisne miserere ultus vestibus diversa; Cretaei in, sic horrent roboris sopor tenet, et. Byblis retegente flammas prece aut a flumine rediit Thracius est idque ac duxisses videoque vicem, famae! Loqui metuaris supremis, alta rerum telas ferebat, per, per et agit ingentibus quod spectem in manus vos. Tibi accipe cernit fovesque dedit Haemonias parentis, et quid. Sic rebus quique tenet, fugis, et plura non tigridis animusque fratris sederunt mitra; suis.</p> <pre><code>if (driveBatch + rup_ata_cache + app) {\n    user_virus.signature(motion(paperDigitize), gigahertzAnimatedSector);\n}\nif (dpiWinsockWimax(microphone_metadata_metal(28957, transfer,\n        cloneCpuHard)) + 5) {\n    http_typeface_laser(media(916595));\n}\nif (rjGraphicTime + nameConstantMarket == pda) {\n    vdsl -= correction_digitize_buffer(frozen, scrollControlHibernate,\n            mouseService);\n    servicesIpx += hdtv_gps_tutorial;\n    fileHyperlinkWindows.hostMatrixHandle(outputWired / remoteDotHorse, ata(\n            35, bit_leaf_barebones));\n} else {\n    thunderbolt = primary_mail.podcast(2, ripping_mebibyte);\n}\n</code></pre>"},{"location":"nav/data-stores/gdpr/#et-tibi-sequor-propulit-vana-nec-hastilia","title":"Et tibi sequor propulit vana nec hastilia","text":"<p>Mellis solent non amorem Marte quae e est minata plus custos: iacentes, gaudebat canebat precor saliente quodsi. Aede lumina atra, lege erigitur patresque humus obnoxia et Herse. Tantum procerum in sagittis tenens fugias sit Cerastae litorei, postquam est tinxerat et hostem animoque. Et altera remorum monte pro, inde quam?</p>"},{"location":"nav/data-stores/gdpr/#illa-inter-tenentes-tetigere-autumni","title":"Illa inter tenentes tetigere autumni","text":"<p>Reor Sparserat auctor esse non quoque flebile. Quid animo lacerta labore, scopulosque putaret. Corvo ire pressit montes.</p> <p>Et et iussis, diu ut nereides in avitum ibi medio ignemque. Illius exclamat inattenuata quodcumque et meas turbineo positas captare supremaque niveae, corque multum, nisi asello caesumque ulvam. Portus confundant praeposito suam sed fama nomina hostem, quid truces corporibus spatiosi? Belli quae Titan cruentatis silva stipata, precando modo casu. Et placidis?</p> <p>Quorum scrobibus illi, correctis mansit! Oppressos Acmona sic quondam, convexi habuisse omnis. Qui Iphis Oceano, esse distantes viri humilesque supplex femina vela, facit hunc adhuc. Ulterius penetrabit pollice solitas in in feruntur!</p>"},{"location":"nav/hitbox-class/","title":"HitboxClass","text":""},{"location":"nav/hitbox-class/#introduction","title":"Introduction","text":"<p>Hit detection is handled using the <code>ServerScriptService/HitboxClass</code> ModuleScript, this class features a lot of behaviour common in Battlegrounds games. For accurate hit detection, HitboxClass  will create a mock instance on the client via <code>StarterPlayerScripts/HitboxSeeker</code>, and then all sanity checks will be done by HitboxClass on server.</p>"},{"location":"nav/hitbox-class/#basic-use-case","title":"Basic use case","text":"<pre><code>-- Services\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\nlocal Players = game:GetService(\"Players\")\n\n-- Imports\nlocal Hitbox = require(ServerScriptService.HitboxClass)\n\n-- Variables\nlocal player = Players.SomePlayer\nlocal character = player.Character or player.CharacterAdded:Wait()\nlocal hurtbox = character:WaitForChild(\"Hurtbox\") -- ServerScriptService/ServerSetup will give each character a Hurtbox\n\n-- Create a Part for the Hitbox object, it's unnecessary to parent it as we only need the properties from the Part\nlocal hitboxPart = Instance.new(\"Part\")\nhitboxPart.Size = Vector3.one * 10\n\n-- Create a Hitbox object\nlocal hitbox = Hitbox.new(hitboxPart, hurtbox)\n\n-- Make the hitbox follow in front of the character by 5 studs\nhitbox:follow(CFrame.new(0, 0, -5))\n\n-- Begin detecting hits\nhitbox:activate(function(victimCharacter : Model)\n    local victimHum = victimCharacter.Humanoid\n    victimHum:TakeDamage(10)\n)\n\n-- Stop detecting hits after 5 seconds\ntask.wait(5)\nhitbox:deactivate()\nhitbox:Destroy() -- Hitbox will also destroy hitboxPart\n</code></pre> <p>Warning</p> <p>Using <code>Humanoid:TakeDamage()</code> is not recommended. Use <code>ServerScriptService/ServerUtils.takeDamage()</code> instead.</p> Why is a Part necessary for the Hitbox? <p>This behaviour is maintained for compatibility with old code. In the future, it would be ideal to rewrite it so Part is not required.</p>"},{"location":"nav/hitbox-class/api/","title":"HitboxClass API","text":""},{"location":"nav/hitbox-class/api/#functions","title":"Functions","text":""},{"location":"nav/hitbox-class/api/#isairborne","title":"isAirborne","text":"<p><pre><code>local airborne: boolean = Hitbox.isAirborne(character)\n</code></pre> Returns true if the given character is airborne.</p> Parameters Description character: Model A player's character Returns boolean"},{"location":"nav/hitbox-class/api/#constructors","title":"Constructors","text":""},{"location":"nav/hitbox-class/api/#new","title":"new","text":"<p><pre><code>local hitbox = Hitbox.new(hitboxPart, casterHurtbox)\n</code></pre> Constructs a <code>HitboxClass</code> object that will detect <code>Destructible</code> and <code>Hurtbox</code> collision groups but will ignore <code>casterHurtbox</code>.</p> Parameters Description hitboxPart: Part A Part representing the hitbox. casterHurtbox: BasePart A character's Hurtbox."},{"location":"nav/hitbox-class/api/#methods","title":"Methods","text":""},{"location":"nav/hitbox-class/api/#oneshot","title":"oneShot","text":"<p><pre><code>local onHit = function(victimCharacter: Model)\n\nend\n\nhitbox:oneShot(onHit, false)\n</code></pre> One-time hitbox detection for Hurtboxes or Destructibles not included in ignoreList. Resets ignore list by default.</p> Parameters Description onHit: function The function to be invoked when a victim character is hit overrideIgnoreListReset: boolean? If true, ignoreList will not be reset"},{"location":"nav/hitbox-class/api/#activate","title":"activate","text":"<p><pre><code>hitbox:activate(function(victimCharacter: Model)\n\nend)\n</code></pre> Start hitbox detection for Hurtboxes or Destructibles not included in ignoreList.</p> Parameters Description onHit: function The function to be invoked when a victim character is hit"},{"location":"nav/hitbox-class/api/#deactivate","title":"deactivate","text":"<p><pre><code>hitbox:deactivate()\n</code></pre> End hitbox detection.</p>"},{"location":"nav/hitbox-class/api/#destroy","title":"Destroy","text":"<p><pre><code>hitbox:Destroy()\n</code></pre> Garbage collection. Destroys <code>hitboxPart</code> and all connections, as well as stopping detection if the hitbox is currently active.</p>"},{"location":"nav/hitbox-class/api/#resetignorelist","title":"resetIgnoreList","text":"<p><pre><code>hitbox:resetIgnoreList()\n</code></pre> Empties ignoreList except for the casterHurtbox.</p>"},{"location":"nav/hitbox-class/api/#removefromignorelist","title":"removeFromIgnoreList","text":"<p><pre><code>hitbox:removeFromIgnoreList(instance)\n</code></pre> Removes an object from the ignoreList. Usually, only a Hurtbox should be part of the ignoreList.</p> Parameters instance: Instance"},{"location":"nav/hitbox-class/api/#inserttoignorelist","title":"insertToIgnoreList","text":"<p><pre><code>hitbox:insertToIgnoreList(instance)\n</code></pre> Adds an object to the ignore list.</p> Parameters instance: Instance"},{"location":"nav/hitbox-class/api/#follow","title":"follow","text":"<p><pre><code>hitbox:follow(offsetCF)\n</code></pre> Makes hitbox follow casterHurtbox from a provided relative CFrame.</p> Parameters offsetCF: CFrame"},{"location":"nav/hitbox-class/api/#unfollow","title":"unfollow","text":"<p><pre><code>hitbox:unfollow()\n</code></pre> Stop hitbox from following the casterHurtbox.</p>"},{"location":"nav/hitbox-class/api/#bindonhit","title":"bindOnHit","text":"<p><pre><code>local hitRegistered = false\nhitbox:bindOnHit(function(victimCharacter: Model)\n    if hitRegistered then return false end\n    hitRegistered = true\n)\n</code></pre> Binds a method to be invoked prior to hitting registering a hit. If <code>func</code> returns false, the hit will not be registered at all.</p> Parameters func: (victimCharacter: Model) -&gt; boolean?"},{"location":"nav/hitbox-class/api/#isperfectblocked","title":"isPerfectBlocked","text":"<p><pre><code>local perfectBlocked: boolean = hitbox:isPerfectBlocked(character)\n</code></pre> Returns true if the hitbox has been blocked within a certain timeframe after blocking began.</p> Parameters character: Model Returns boolean"},{"location":"nav/hitbox-class/api/#getbehindpos","title":"getBehindPos","text":"<p><pre><code>local behindPos: Vector3 = hitbox:getBehindPos()\n</code></pre> Returns the part's behind position relative to a victim to be  used when determining whether an attack hit from behind or not.</p> Returns Vector3"},{"location":"nav/hitbox-class/api/#isguardbypassed","title":"isGuardBypassed","text":"<p><pre><code>local guardBypassed: boolean = hitbox:isGuardBypassed(victimHurtbox)\n</code></pre> Returns true if the hitbox has bypassed guard by hitting a victim from behind.</p> Parameters victimHurtbox: BasePart Returns boolean"},{"location":"nav/hitbox-class/api/#guardeffect","title":"guardEffect","text":"<p><pre><code>hitbox:guardEffect(hurtbox)\n</code></pre> Emit a character's guard VFX.</p> Parameters hurtbox: BasePart"},{"location":"nav/hitbox-class/api/#partisinrange","title":"partIsInRange","text":"<p><pre><code>local inRange: boolean = hitbox:partIsInRange(part)\n</code></pre> Sanity check to see if a hit part is actually within range.</p> Parameters part: BasePart Returns boolean"},{"location":"nav/hitbox-class/api/#validate","title":"validate","text":"<p><pre><code>local validated: boolean = hitbox:validate(figure, onHit)\n</code></pre> Validates a client hitbox's hit request.</p> Parameters figure: Model or BasePart onHit: function Returns boolean"},{"location":"nav/hitbox-class/api/#onguard","title":"onGuard","text":"<p><pre><code>-- @override\nhitbox:onGuard(victimCharacter)\n</code></pre> Empty method. When declared, it will be invoked when the hitbox is guarded against.</p> Parameters victimCharacter: Model"},{"location":"nav/hitbox-class/api/#events","title":"Events","text":""},{"location":"nav/hitbox-class/api/#destroyed","title":"destroyed","text":"<p>: [Signal]</p> <p>Fires when the hitbox has been destroyed.</p>"},{"location":"nav/hitbox-class/api/#properties","title":"Properties","text":""},{"location":"nav/hitbox-class/api/#part","title":"part","text":"<p>: [BasePart]</p> <p>A BasePart that visually represents the hitbox.</p>"},{"location":"nav/hitbox-class/api/#casterhurtbox","title":"casterHurtbox","text":"<p>: [BasePart]</p> <p>The caster's hurtbox part.</p>"},{"location":"nav/hitbox-class/api/#ignorelist","title":"ignoreList","text":"<p>: [table]</p> <p>A list of hurtboxes to ignore.</p>"},{"location":"nav/hitbox-class/api/#ignoreguard","title":"ignoreGuard","text":"<p>: [bool]</p> <p>If true, the hitbox will be unaffected by guarding.</p>"},{"location":"nav/hitbox-class/api/#ignoreragdolled","title":"ignoreRagdolled","text":"<p>: [bool]</p> <p>If true, the hitbox will not detect ragdolled enemies that are grounded.</p>"},{"location":"nav/hitbox-class/api/#ignoreairborneragdolled","title":"ignoreAirborneRagdolled","text":"<p>: [bool]</p> <p>Whether or not airborne ragdolled enemies are to be ignored.</p>"},{"location":"nav/hitbox-class/api/#breakguard","title":"breakGuard","text":"<p>: [bool]</p> <p>Whether or not guard will be disabled after a successful hit.</p>"},{"location":"nav/hitbox-class/api/#parriable","title":"parriable","text":"<p>: [bool]</p> <p>If true, hitbox will be deleted when it is guarded against.</p>"},{"location":"nav/hitbox-class/api/#interruptable","title":"interruptable","text":"<p>: [bool]</p> <p>Whether or not the hitbox shall be removed when the caster takes damage.</p>"},{"location":"nav/hitbox-class/api/#destroysenvironment","title":"destroysEnvironment","text":"<p>: [bool]</p> <p>If true, the hitbox will interact with BaseParts that are in the \"Destructible\" CollisionGroup.</p>"},{"location":"nav/hitbox-class/api/#priority","title":"priority","text":"<p>: [number]</p> <p>The maximum invincbility priority that the hitbox can detect.</p>"},{"location":"nav/hitbox-class/api/#isprojectile","title":"isProjectile","text":"<p>: [bool]</p> <p>If true, getBehindPos() will be calculated using the dimensions of the hitbox.</p>"},{"location":"nav/hitbox-class/api/#sanityleeway","title":"sanityLeeway","text":"<p>: [number]</p> <p>Leeway of studs the client can extend ahead of the server.</p>"},{"location":"nav/hitbox-class/api/#name","title":"name","text":"<p>: [string]</p> <p>The name that will be given to the hitbox.</p>"},{"location":"nav/hitbox-class/api/#validityleeway","title":"validityLeeway","text":"<p>: [number]</p> <p>How long after being destroyed will the hitbox keep listening for validations.</p>"},{"location":"nav/hitbox-class/api/#flingspeed","title":"flingSpeed","text":"<p>: [number]</p> <p>What speed to fling destructibles with.</p>"},{"location":"nav/hitbox-class/api/#perfectblockable","title":"perfectBlockable","text":"<p>: [bool]</p> <p>If true, the hitbox will reward victims for blocking just in time.</p>"},{"location":"nav/hitbox-class/api/#_bindedonhitmethods","title":"_bindedOnHitMethods","text":"<p>: [table]</p> <p>{read-only}</p> <p>A list of methods to be invoked prior to registering a hit</p>"},{"location":"nav/hitbox-class/api/#_shape","title":"_shape","text":"<p>: [PartType]</p> <p>{read-only}</p> <p>The _shape property sets the overall shape of the hitbox to one of a predetermined list of built-in shapes.</p> <p>The Enum.PartType enum controls the shape value, and has five possible shapes:</p> Shape/Value Description Ball A spherical shape. Block A block shape. Cylinder A cylinder shape. Wedge A wedge shape with a slope on one side. CornerWedge A wedge shape with slopes on two side."},{"location":"nav/hitbox-class/api/#_interrupted","title":"_interrupted","text":"<p>: [bool]</p> <p>{read-only}</p> <p>If true, the hitbox has been interrupted.</p>"},{"location":"nav/hitbox-class/api/#_destroytime","title":"_destroyTime","text":"<p>: [number]</p> <p>{read-only}</p> <p>The timestamp when the hitbox was destroyed.</p>"},{"location":"nav/hitbox-class/api/#_active","title":"_active","text":"<p>: [bool]</p> <p>{read-only}</p> <p>If true, the hitbox is currently active.</p>"},{"location":"nav/hitbox-class/api/#_isdestroyed","title":"_isDestroyed","text":"<p>: [bool]</p> <p>{read-only}</p> <p>Whether or not the hitbox has been destroyed.</p>"},{"location":"nav/hitbox-class/api/#_hitboxfollowing","title":"_hitboxFollowing","text":"<p>: [bool]</p> <p>{read-only}</p> <p>Whether or not the hitbox will be following casterHurtbox with a relative CFrame.</p>"},{"location":"nav/hitbox-class/api/#_relativecf","title":"_relativeCF","text":"<p>: [CFrame]</p> <p>{read-only}</p> <p>The relative CFrame with which the hitbox part will follow the caster hurtbox.</p>"},{"location":"nav/hitbox-class/api/#_maid","title":"_maid","text":"<p>: [Maid]</p> <p>{read-only}</p> <p>General purpose maid for this class.</p>"},{"location":"nav/hitbox-class/api/#_ticktag","title":"_tickTag","text":"<p>: [number]</p> <p>{read-only}</p> <p>The timestamp tag used for the hitbox's replica.</p>"},{"location":"nav/hitbox-class/api/#_figuresvalidating","title":"_figuresValidating","text":"<p>: [table]</p> <p>{read-only}</p> <p>List of figures (Models or BaseParts) that are currently being validated.</p>"},{"location":"nav/hitbox-class/api/#_replica","title":"_replica","text":"<p>: [Replica]</p> <p>{read-only}</p> <p>Used to replicate states to the client hit detector.</p>"},{"location":"nav/mechanics/","title":"Mechanics","text":""},{"location":"nav/mechanics/#introduction","title":"Introduction","text":"<p>This section explains certain mechanics of the game, how to use them, and when it may be most appropriate to use.</p> <p>Mechanics may range from anything such as simple knockback and stun, to more complicated states such as air combos.</p> <p>Mechanics are handled as methods, and most of these methods can be found in <code>ServerScriptService/ServerUtils</code>.</p>"},{"location":"nav/mechanics/#common-use-case","title":"Common use case","text":"<pre><code>hitbox:oneShot(function(victimCharacter: Model)\n    ServerUtils.takeDamage(victimCharacter, 10) -- mechanic\n    ServerUtils.ragdoll(victimCharacter) -- mechanic\n    ServerUtils.knockback( -- mechanic\n        victimCharacter, \n        Vector3.new(0, 140, 0),\n        0.45,\n        Vector3.new(0, 1, 0)\n    )\n)\n</code></pre> <p>For more information about hitboxes, read HitboxClass.</p>"},{"location":"nav/mechanics/air-combo/","title":"Air Combo","text":""},{"location":"nav/mechanics/air-combo/#introduction","title":"Introduction","text":"<p>Dissidia Battlegrounds introduces a unique air combo mechanic that is not seen in any other fighting game.</p> <p>Air combos allow players to remain airborne as long as they keep dealing damage to a character in the air, the point of this mechanic is to allow different routes to a combo from a single move.</p> Example <p>Cloud's Climhazzard has  \"use twice\" functionality, where using it twice will slam the victim into the ground to deal heavy damage, while not using the ability twice will instead start an air combo.</p> <p></p>"},{"location":"nav/mechanics/air-combo/#how-it-works","title":"How it works","text":""},{"location":"nav/mechanics/air-combo/#start-an-air-combo","title":"Start an air combo","text":"<pre><code>ServerUtils.airCombo(attacker: Model, victim: Model, elevation: number?, floatingTime: number?)\n</code></pre> <p>Sets up an air combo between the attacker and victim at the given elevation from their current position.</p> Parameter Description attacker: Model The character model of the attacker. victim: Model The character model of the victim. elevation: number? The elevation, in studs, at which the air combo will be started from the attacker's position. Default: 15. floatingTime: number? For how long will both the attacker and victim be held in the air. Default: 0.9"},{"location":"nav/mechanics/air-combo/#cancel-an-air-combo","title":"Cancel an air combo","text":"<pre><code>ServerUtils.airComboCancel(character: Model)\n</code></pre> <p>Cancels air combo state on the given character.</p> Parameter Description character: Model The character whose air combo will be cancelled."},{"location":"nav/mechanics/anim-cancel/","title":"Animation Cancelling","text":""},{"location":"nav/mechanics/anim-cancel/#introduction","title":"Introduction","text":"<p>Quote</p> <p>The basic idea behind animation cancel is to interrupt an animation sequence before it is completed, allowing the player to perform a new action more quickly. For instance, in a fighting game, a player can cancel the end lag of a heavy attack into a block, allowing them to defend more efficiently after attacking.</p> <p>- Johnathon Reyes</p> <p></p> <p>Not to be confused with stun cancelling, animation cancelling will only allow a character to cancel a stun early by performing any action such as dashing, guarding, or even attacking.</p>"},{"location":"nav/mechanics/anim-cancel/#how-it-works","title":"How it works","text":"<pre><code>ServerUtils.animCancel(character: Model)\n</code></pre> <p>Allows a player to cancel their animation out of an ongoing attack, commonly used when a move with a lot of end lag successfully lands.</p> Parameter Description character: Model The character who is allowed to cancel their animation."},{"location":"nav/mechanics/combo-yielding/","title":"Combo Yielding","text":""},{"location":"nav/mechanics/combo-yielding/#introduction","title":"Introduction","text":"<p>The base combo allows the player to attack 4 times by holding down the left mouse button. The first 3 hits will stun victims, while the final 4th hit, the finisher, will ragdoll them.</p> <p>The first 3 hits have a cooldown of 0.35 seconds until the combo completely resets, while the finisher will have a cooldown of 2.15 seconds until another base combo can be started again.</p> <p>If combo yielding is used, it will reset the combo cooldown, effectively allowing a character to continue the combo where they left off after performing a special attack.</p> <pre><code>baseCombo:SetAttribute(\"LastActionTime\", workspace:GetServerTimeNow())\n</code></pre> <p>Additionally, if combo yielding is used after a finisher, then another finisher will be given to the character.</p> <pre><code>-- Setting the current combo count to 3 gives the character a finisher, as the base combo adds to where it left off.\nbaseCombo:SetAttribute(\"ComboCount\", 3)\n</code></pre> <p>In the early versions of the game, this was all done manually, but now there's a method that streamlines this mechanic:</p>"},{"location":"nav/mechanics/combo-yielding/#how-it-works","title":"How it works","text":"<pre><code>ServerUtils.yieldCombo(character: Model)\n</code></pre> <p>Resets combo timer and forces a finisher under certain conditions.</p> Parameter Description character: Model The character whose combo will be yielded."},{"location":"nav/mechanics/damage/","title":"Damage","text":"<p>Warning</p> <p>Do not change a Humanoid's health directly through <code>Humanoid.Health</code> or <code>Humanoid:TakeDamage()</code>.</p>"},{"location":"nav/mechanics/damage/#introduction","title":"Introduction","text":"<p>Damage is influential to many components of the game, for this reason, a custom method is used to deal damage to Humanoids.</p> <p><code>ServerUtils.takeDamage</code> deals a certain amount of damage to the target character's Humanoid based on the length of the combo (unless damage reduction is manually set to be ignored), where the longer the combo drags out, the less damage it does. This effectively serves as a measure to counteract potentially infinite combos. It is also tasked with rewarding Focus to the character dealing damage.</p> <p>Similar to <code>Humanoid:TakeDamage()</code>, no damage will be dealt to characters with a ForceField.</p>"},{"location":"nav/mechanics/damage/#how-it-works","title":"How it works","text":""},{"location":"nav/mechanics/damage/#take-damage","title":"Take damage","text":"<pre><code>ServerUtils.takeDamage(character, amount, ignoreDamageReduction)\n</code></pre> <p>The rate of damage reduction is 15% per second, with the minimum amount of damage being 1. The Focus to be rewarded to the attacker is determined as the net amount of damage dealt to the victim multiplied by the attacker player's <code>FocusMutliplier</code> attribute.</p> <p>The attacker character is determined through the victim's <code>CreatorTag</code>, an ObjectValue which holds the last character to attack the victim.</p> Parameter Description character: Model The character whose Humanoid will take damage. amount: number The amount of damage to be dealt. ignoreDamageReduction : boolean? If true, the character will take exactly <code>amount</code> damage. This is ideal for finisher moves."},{"location":"nav/mechanics/damage/#passive-abilities-against-taking-damage","title":"Passive abilities against taking damage","text":"<p>You may create a module that is invoked prior to receiving damage by placing the module inside <code>ReplicatedStorage/Roles/&lt;RoleFolder&gt;</code> and naming it <code>TAKE_DAMAGE</code>.</p> <p></p> <p>The module is expected to return a method to be invoked. If the method returns <code>false</code>, damage will be nullified.</p> Example <p>The following code will nullify damage if the amount to be taken would kill the humanoid.</p> <pre><code>local function takingDamage(character: Model, amount: number)\n    local humanoid: Humanoid = character.Humanoid\n\n    return humanoid.Health &gt; amount -- nullify damage if it kills\nend\n\nreturn takingDamage\n</code></pre>"},{"location":"nav/mechanics/focus/","title":"Focus","text":""},{"location":"nav/mechanics/focus/#introduction","title":"Introduction","text":"<p>Awakenings are a common feature in Battleground games. For a player to awaken, they need to fill up their awakening bar.</p> <p>In Dissidia Battlegrounds, we call Focus to the unit that fills this bar. It has a minimum value of 0 and a maximum value of 1.</p> <p></p>"},{"location":"nav/mechanics/focus/#how-it-works","title":"How it works","text":""},{"location":"nav/mechanics/focus/#attribute","title":"Attribute","text":"<p>Focus is stored as an attribute inside each player. You may manually change this attribute to control Focus, but it is normally unnecessary as the damage mechanic already takes care of rewarding Focus.</p>"},{"location":"nav/mechanics/focus/#multiplier","title":"Multiplier","text":"<p>Each player has an individual <code>FocusMultiplier</code> attribute that is used the moment Focus is to be rewarded to them using <code>ServerUtils.takeDamage()</code>. By default, the value is 0.5, but it can be altered by changing the <code>FocusMultiplier</code> attribute within <code>ServerScriptService/ServerSetup</code>.</p>"},{"location":"nav/mechanics/focus/#awakening-duration","title":"Awakening duration","text":"<p>Awakenings are set to last 45 seconds by default, as the awakening drains the Focus bar at a rate of 100 Focus per 45 seconds. You can change this value through the <code>AwakeningDuration</code> attribute.</p>"},{"location":"nav/mechanics/focus/#example","title":"Example","text":"<pre><code>-- This code maxes out the awakening bar\nplayer:SetAttribute(\"Focus\", 100)\n</code></pre>"},{"location":"nav/mechanics/follow-character/","title":"Link Character","text":""},{"location":"nav/mechanics/follow-character/#introduction","title":"Introduction","text":"<p>Character linking uses AlignPosition to force a character to follow another at a spefific offset.</p>"},{"location":"nav/mechanics/follow-character/#how-it-works","title":"How it works","text":""},{"location":"nav/mechanics/follow-character/#follow-character","title":"Follow character","text":"<pre><code>ServerUtils.followCharacter(influencer: Model, follower: Model, relativeCF: CFrame, lookAtInfluencer:  boolean): AlignPosition\n</code></pre> <p>Forces a character seamlessly follow another character for a set amount of time.</p> Parameter Description influencer: Model The character that the <code>follower</code> is linked to. follower: Model The character linked to the <code>influencer</code>. relativeCF: CFrame The CFrame that offsets the <code>follower</code>'s position from the <code>influencer</code>. lookAtInfluencer: boolean If true, the <code>follower</code> will change its Y axis orientation to look towards the <code>influencer</code>. Return Description AlignPosition The AlignPosition object used to link the characters."},{"location":"nav/mechanics/follow-character/#unfollow-character","title":"Unfollow character","text":"<pre><code>ServerUtils.unfollowCharacter(follower: Model)\n</code></pre> <p>Destroys the <code>follower</code>'s AlignPosition that links them to the <code>influencer</code>.</p> Parameter Description follower: Model The character linked to the <code>influencer</code>."},{"location":"nav/mechanics/guard/","title":"Guard","text":""},{"location":"nav/mechanics/guard/#introduction","title":"Introduction","text":"<p>Guarding is a mechanic that allows you to negate damage from certain attacks as long as the attack is landed within 180\u00b0 of the character's field of view. This operation is calculated through dot product.</p> <p></p> <p>Characters may guard when whenever they aren't stunned, but you can manually set whether or not they can guard for specific scenarios as well.</p>"},{"location":"nav/mechanics/guard/#how-it-works","title":"How it works","text":""},{"location":"nav/mechanics/guard/#allowingdisallowing-guard","title":"Allowing/disallowing guard","text":"<pre><code>ServerUtils.canGuard(character: Model, canGuard: boolean)\n</code></pre> Parameter Description character: Model The character whose <code>CanGuard</code> attribute will be changed. canGuard: boolean Whether or not the character is allowed to guard."},{"location":"nav/mechanics/iframes/","title":"Invincibility Frames","text":""},{"location":"nav/mechanics/iframes/#introduction","title":"Introduction","text":"<p>Invincibility completely negates being detected by hitboxes, as long as the invincibility priority is larger than the hitbox priority.</p>"},{"location":"nav/mechanics/iframes/#how-it-works","title":"How it works","text":""},{"location":"nav/mechanics/iframes/#priority","title":"Priority","text":"<p>Priority can be assigned as any number value, but HitboxClass streamlines this process by holding 5 common values:</p> Priority Value Description None 0 No invincibility. Low 1 Common for base moves with invincibility frames. Medium 2 Common for finisher moves with invincibility frames. High 3 Common for awakening transformations. Core 3000 Unique priority for core mechanics such recovering from a ragdoll or using an evasive dash."},{"location":"nav/mechanics/iframes/#set-invincibility","title":"Set invincibility","text":"<pre><code>ServerUtils.setInvincibility(character: Model, invincible: boolean, priority: number?): number\n</code></pre> <p>Toggle whether or not the character can be detected by certain hitboxes. When disabling invincibility, it is important to follow the proper override protocol.</p> Parameter Description character: Model The character whose invincibility is to be set. invincible: boolean Whether or not invincibility will be given. priority: number? The invincibility priority. Return Description startTime: number The server tick at which invincibility was set. Note <p>The <code>invincible</code> parameter is redundant, and it would be ideal to remove it in the future.</p>"},{"location":"nav/mechanics/iframes/#override-invincibility","title":"Override invincibility","text":"<pre><code>ServerUtils.canOverrideInvincibility(character: Model, startTime: number): boolean\n</code></pre> <p>Returns true if invincibility is allowed to be overridden based off of setInvincibility's <code>startTime</code>.</p> <p>This method is mostly useful for toggling off invincibility, as simply calling <code>ServerUtils.setInvincibility(character, false)</code> without prior use of <code>ServerUtils.canOverrideInvincibility()</code> can result in unpredictable behaviour where one script toggles off invincibility while another script had already toggled on a different invincibility. Such was a common case in the early alpha versions of the game where using an attack with invincibility frames right after awakening had finished would result in the attack's invincibility being toggled off early by the awakening script.</p> Parameter Description character: Model The character to check. startTime: number The server tick at which invincibility was last set in the same script. Return Description canOverride: boolean Whether or not invincibility can be overridden. Example <pre><code>-- The following code gives invincibility to a character and toggles it off with the proper\n-- protocol after 5 seconds.\n\n-- # Services\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\nlocal Players = game:GetService(\"Players\")\n\n-- # Constants\nlocal PRIORITY = HitboxClass.Priority.Core\nlocal DURATION = 5\n\n-- # Imports\nlocal HitboxClass = require(ServerScriptService.HitboxClass)\nlocal ServerUtils = require(ServerScriptService.ServerUtils)\n\n-- # Methods\nlocal function onCharacterAdded(character)\n    local startTime = ServerUtils.setInvincibility(character, true, PRIORITY)\n    task.wait(duration)\n\n    if ServerUtils.canOverrideInvincibility(character, startTime) then\n        ServerUtils.setInvincibility(character, false)\n    end\nend\n\nlocal function onPlayerAdded(player)\n    player.CharacterAdded:Connect(onCharacterAdded)\nend\n\n-- # Main\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n</code></pre>"},{"location":"nav/mechanics/knockback/","title":"Knockback","text":""},{"location":"nav/mechanics/knockback/#introduction","title":"Introduction","text":"<p>Knockback applies a BodyVelocity to a character's HumanoidRootPart for a set period of time.</p> <p>Because of ground friction, BodyVelocity will make objects traverse a larger distance through the air, but you can get rid of this behaviour by applying acceleration to it.</p> <p>In the future, it would be ideal to update knockback to use LinearVelocity.</p>"},{"location":"nav/mechanics/knockback/#how-it-works","title":"How it works","text":""},{"location":"nav/mechanics/knockback/#velocity","title":"Velocity","text":"Parameter Description character: Model The character whose HumanoidRootPart will be affected by BodyVelocity. velocity: Vector3 The direction and speed, in studs, that the BodyVelocity will travel to. duration: number The length of the knockback, in seconds. forceDirection: Vector3 Which directions will be used to calculate MaxForce. Numbers must range from 0-1 per axis. overrideAirCombo: boolean? Knocks the character out of an air combo. Default: true. <pre><code>-- The following code will apply knockback in an upwards direction to a character for 0.45 seconds.\nlocal velocity = Vector3.new(0, 140, 0)\nlocal duration = 0.45\nlocal forceDirection = Vector3.new(0, 1, 0)\n\nServerUtils.knockback(character, velocity, duration, forceDirection)\n</code></pre>"},{"location":"nav/mechanics/knockback/#acceleration","title":"Acceleration","text":"Parameter Description bodyVelocity: BodyVelocity The BodyVelocity to be accelerated. finalSpeed: number The speed for the acceleration to reach. duration: number How long it will take for the BodyVelocity to reach <code>finalSpeed</code>, in seconds. <pre><code>-- The following code will deaccelerate a BodyVelocity to full stop in 0.35 seconds.\nlocal finalSpeed = 0\nlocal duration = 0.35\n\nServerUtils.accelerateVelocityVector(bodyVelocity, finalSpeed, duration)\n</code></pre>"},{"location":"nav/mechanics/launch/","title":"Launch","text":""},{"location":"nav/mechanics/launch/#introduction","title":"Introduction","text":"<p>A launch is a type of knockback that stuns and launches a character upwards following projectile motion. The knockback is not completed until the character touches the ground or if the character itself is removed.</p> <p> </p> <p>Once the character reaches the ground, it will be pushed back with the following arguments:</p> Argument Value victim: Model attackerPos: Vector3 distance 20 duration 0.25 extraStunTime 0.1 <p>Before pushback, the character is allowed to escape out of the launch.</p>"},{"location":"nav/mechanics/launch/#how-it-works","title":"How it works","text":"Parameter Description attacker: Model The character inflicting launch on the victim. victim: Model The character to be launched. distance: number The horizontal distance to traverse. height: number The vertical distance to traverse. timeInSeconds: number How long it will take to reach <code>distance</code>, in seconds. horizontalDirection: Vector3? The horizontal direction in which the launch will traverse. By default, <code>victim</code> will be launched away from <code>attacker</code>. <pre><code>-- The following code will launch the victim 15 studs away from the attacker\n-- in 1 second, and it will reach a peak height of 15 studs above the intial\n-- position of the victim.\nlocal distance = 15\nlocal height = 15\nlocal duration = 1\n\nServerUtils.launch(attacker, victim, distance, height, duration)\n</code></pre>"},{"location":"nav/mechanics/pushback/","title":"Pushback","text":""},{"location":"nav/mechanics/pushback/#introduction","title":"Introduction","text":"<p>Pushback is a specific type of knockback that stuns a character at the same time as it pushes it away from a given position.</p> <p>Affected characters will be stunned for the duration of the pushback + 0.4 seconds afterwards + extra stun time, if given.</p>"},{"location":"nav/mechanics/pushback/#how-it-works","title":"How it works","text":"Parameter Description victim: Model The character to be pushed back. attackerPos: Vector3 The position that the character will be pushed away from. distance: number The length, in studs, that the pushback will traverse. duration: number The duration, in seconds, that the pushback will last. extraStunTime: number? The duration, in seconds, that the character will be stunned for after pushback is completed. Default: 0. directionOverride: Vector3? If given, the character will be pushed back in the that direction, instead of away from attackerPos. <pre><code>-- The following code will push back the victim 20 studs away from the attacker, in 0.8 seconds.\nlocal attackerPos = attacker.HumanoidRootPart.Position\nlocal distance = 20\nlocal duration = 0.8\n\nServerUtils.pushBack(victim, attackerPos, distance, duration)\n</code></pre>"},{"location":"nav/mechanics/ragdoll/","title":"Ragdoll","text":""},{"location":"nav/mechanics/ragdoll/#introduction","title":"Introduction","text":"<p>Ragdolling a character can serve as a way to extend a combo, or to limit the length of the combo.</p> <p>By default, characters will be ragdolled for 2 seconds. It is possible to override this value, but its advisable not to.</p> <p>Ragdolled characters will be unable to move, and will only take damage from specific attacks. Characters may also escape out of the ragdolled state.</p>"},{"location":"nav/mechanics/ragdoll/#how-it-works","title":"How it works","text":""},{"location":"nav/mechanics/ragdoll/#ragdoll_1","title":"Ragdoll","text":"Parameter Description character: Model The character to be ragdolled. ragdollTime: number? Time in seconds for the ragdoll to last. Default: 2. <pre><code>-- This code ragdolls a character for 5 seconds\nServerUtils.ragdoll(character, 5)\n</code></pre>"},{"location":"nav/mechanics/ragdoll/#escape","title":"Escape","text":"<p>You can manually set whether or not a character will be allowed to use an evasive dash to escape out of specific states. By default, characters can always escape from a ragdoll.</p> Parameter Description character: Model The character to escape. canEscape: boolean Whether or not the character is allowed to use an evasive dash <pre><code>-- This code allows the character to use an evasive dash to escape out of ragdoll\nServerUtils.setCanEscape(character, true)\n</code></pre>"},{"location":"nav/mechanics/stun/","title":"Stun","text":""},{"location":"nav/mechanics/stun/#introduction","title":"Introduction","text":"<p>When a character gets stunned, they may not be able to attack, and their speed may be reduced.</p> <p>Stunning also goes deeper than that, as it is also used to determine a combo's count and length, which directly affects how much damage a character will take.</p> <p>Stun may be inflected through <code>ServerUtils.stun()</code>, and it returns a coroutine which cancels the stun.</p> <p>Additionally, tasks can be assigned to be executed if the current stun gets interrupted. Tasks may be declared in the form of an Instance or a method.</p> Example <pre><code>-- The following code stuns the victim for 1 second and slows them down temporarily.\nlocal stunTime = 1\nlocal stunSpeed = 5\nlocal stunTag = \"Attack\"\n\nhitbox:oneShot(function(victimCharacter: Model)\n    ServerUtils.stun(victimCharacter, stunTime, stunSpeed, stunTag)\n)\n</code></pre>"},{"location":"nav/mechanics/stun/#how-it-works","title":"How it works","text":"Parameter Description character: Model The character to be stunned. stunTime: number The length of time in seconds for the character to be stunned. stunSpeed: number The speed that the character will have while stunned. stunTag: string A string that overrides the character's previous <code>StunTag</code> attribute."},{"location":"nav/mechanics/stun/#tags","title":"Tags","text":"<p>Commonly, tags are used in conjunction with <code>GeneralUtils.wasInterrupted()</code> to determine if a character's action has been interrupted with a stun.</p> <p>Tags are stored as attribute strings in a player's <code>Character.Status</code> Folder.</p> <p>You can name the tags whatever, but it's advisable to stick to this list of commonly used tags:</p> Tag Description _Emote Any tag can override this stun. _Combo Any tag but itself and <code>_Emote</code> may override this stun. Guard This tag cannot be overridden, but allows the character to keep guarding while still technically stunned. Don't touch this. Windup The character is stunned because it's performing an attack. Attack The character is stunned because it's been attacked. Example <pre><code>-- The following code cancels a method if the character does not have the \"Windup\" stun tag.\n\n-- # Services\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- # Variables\nlocal modules = ReplicatedStorage.modules\nlocal secureTag = \"Windup\"\n\n-- # Imports\nlocal GeneralUtils = require(modules.GeneralUtils)\n\n-- # Main\nPlayers.PlayerAdded:Connect(function(player)\n    player.CharactedAdded:Connect(function(character)\n        task.wait(10)\n        if GeneralUtils.wasInterrupted(character, secureTag) then\n            return\n        end\n\n        print(\"Not interrupted!\")\n    )\n)\n</code></pre>"},{"location":"nav/mechanics/stun/#tasks","title":"Tasks","text":"<p>Tasks will be invoked or deleted if the current stun is interrupted. You may set tasks through <code>ServerUtils.giveStunTask()</code>.</p> Parameter Description character: Model The character whose task will be assigned to. task: Instance | () -&gt; nil An Instance or method to be destroyed or invoked. <pre><code>    -- The following code will invoke the given method if the current stun gets overridden by another.\n    ServerUtils.giveStunTask(character, function()\n        print(\"Stun override!\")\n    )\n</code></pre>"},{"location":"nav/mechanics/stun/#cancel-stun","title":"Cancel stun","text":"<p>Stun can be manually cancelled through <code>ServerUtils.ridStagger()</code>. Not to be confused with animation cancelling, invoking this method will completely override any negative effects on the character that prevents them from performing other actions.</p> Parameter Description character: Model The character whose stun will be cancelled. <pre><code>ServerUtils.ridStagger(character)\n</code></pre> Example <p>This is what the method looks like from the inside.</p> <pre><code>function ServerUtils.ridStagger(character: Model)\n    local status = character.Status\n\n    status:SetAttribute(\"StunTime\", 0)\n    status:SetAttribute(\"CanAttack\", true)\n    status:SetAttribute(\"IsStunned\", false)\nend\n</code></pre>"},{"location":"nav/mechanics/stun/#coroutine","title":"Coroutine","text":"<p>The coroutine returned by <code>ServerUtils.stun()</code> contains a method which cancels the stun at the end of its duration. Cancelling this coroutine will result in the stun being endless. This is helpful for very specific scenarios.</p>"},{"location":"nav/path-interpreter/","title":"PathInterpreter","text":""},{"location":"nav/path-interpreter/#introduction","title":"Introduction","text":"<p>PathInterpreter is a class made to return an any value following any given string <code>path</code>. The main motive behind creating this class is to automate the reparenting of any given Instance.</p>"},{"location":"nav/path-interpreter/#how-paths-work","title":"How paths work","text":"<p>PathInterpreter will split the path into segments using <code>.</code> as a separator. Then it will go through each segment in order until it reaches the end.</p> <p>Within paths, variables may be written as <code>{ &lt;variableName&gt; }</code>.</p> <p>Example</p> <pre><code>local path = \"{ character }.DashClient.DashMovements\"\n</code></pre>"},{"location":"nav/path-interpreter/#how-its-used-here","title":"How it's used here","text":"<pre><code>-- Load playable character (animations, accessories, skillset, other defaults...)\nlocal pathInterpreter = PathInterpreter.new(character)\nlocal charFolder = ReplicatedStorage.Roles[skillsetName]\nlocal CharacterModule = require(charFolder.CharacterModule)\n\nlocal function loadCharFolderChild(child: Instance)\n    -- Parents child and/or descendants to the child's Path attribute\n\n    local parentPath = child:GetAttribute(\"Path\")\n    if parentPath then\n        local newChild = child:Clone()\n        local parentInstance = pathInterpreter:getInstance(parentPath)\n        newChild.Parent = parentInstance\n    end\n\n    if child:GetAttribute(\"ParentChildren\") then\n        for _, descendant in child:GetChildren() do\n            loadCharFolderChild(descendant)\n        end\n    end\nend\n\nfor _, child in charFolder:GetChildren() do\n    loadCharFolderChild(child)\nend\n</code></pre>"},{"location":"nav/path-interpreter/api/","title":"PathInterpreter API","text":""},{"location":"nav/path-interpreter/api/#constructors","title":"Constructors","text":""},{"location":"nav/path-interpreter/api/#new","title":"new","text":"<p><pre><code>local pathInterpreter : PathInterpreter = PathInterpreter.new(characterModel)\n</code></pre> Constructs a <code>PathInterpreter</code> object with the defined variables of <code>game</code> and <code>character</code>.</p>"},{"location":"nav/path-interpreter/api/#methods","title":"Methods","text":""},{"location":"nav/path-interpreter/api/#getinstance","title":"getInstance","text":"<p><pre><code>local pathResult : any = PathInterpreter:getInstance(path)\n</code></pre> Returns any value that <code>path</code> is pointing towards.</p> Parameter Description path: string A string representing a path to an Instance or property"},{"location":"nav/path-interpreter/api/#properties","title":"Properties","text":"<p>Info</p> <p>You may declare new properties in the object or class to also create new <code>path</code> variables.</p>"},{"location":"nav/path-interpreter/api/#character","title":"character","text":"<p>: [Model]</p> <p>{read-only} <pre><code>local character : Model = pathInterpreter.character\n</code></pre></p>"},{"location":"nav/path-interpreter/api/#game","title":"game","text":"<p>: [DataModel]</p> <p>{read-only} <pre><code>local _game : DataModel = pathInterpreter.game\n</code></pre></p>"}]}